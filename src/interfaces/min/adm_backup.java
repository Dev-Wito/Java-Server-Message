/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces.min;

import core.json;
import core.pasarela;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONObject;

/**
 *
 * @author wito
 */
public class adm_backup extends javax.swing.JInternalFrame {

    /**
     * Creates new form adm_backup
     */
    JFileChooser chooser;

    public adm_backup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_log = new javax.swing.JTextArea();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Administrar Copias de Seguridad");

        jButton1.setText("Exportar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Importar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txt_log.setEditable(false);
        txt_log.setColumns(20);
        txt_log.setRows(5);
        jScrollPane1.setViewportView(txt_log);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            exportar();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(adm_backup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            importar();
        } catch (IOException ex) {
            Logger.getLogger(adm_backup.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void exportar() throws IOException, InterruptedException {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Seleccione carpeta para guardar");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String rutaCarpeta = chooser.getSelectedFile().getAbsolutePath();
            dumpDB(rutaCarpeta);
        } else {
            System.out.println("No seleccionó ninguna carpeta");
        }
    }

    private void dumpDB(String rutaCarpeta) throws IOException, InterruptedException {
        DateFormat formato = new SimpleDateFormat("yyyy-mm-dd#hmsa");
        Date fecha = new Date();
        String fecha2 = formato.format(fecha);
        String archivo = "BackupDB-" + fecha2 + ".json";
        String RutaABS = rutaCarpeta + System.getProperty("file.separator") + archivo;
        JSONObject vector = new JSONObject();
        vector.put("API", "getBackup");
        String texto_backup = pasarela.backup(vector);
        texto_backup = texto_backup.replace("null", "\"\"");
        File archivo_json = new File(RutaABS);
        BufferedWriter bw;
        bw = new BufferedWriter(new FileWriter(archivo_json));
        bw.write(texto_backup);
        bw.close();
        txt_log.setText("Exportacion Exitosa");
    }

    private void importar() throws IOException {
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos json o txt", "txt", "json");
        chooser = new JFileChooser();
        chooser.setDialogTitle("Seleccione archivo para leer");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(filtro);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String rutaArchivo = chooser.getSelectedFile().getAbsolutePath();
            leer(rutaArchivo);
        } else {
            System.err.println("No seleccionó ningun archivo");
        }
    }

    private void leer(String rutaArchivo) throws FileNotFoundException, IOException {
        String linea;
        String lectura = "";
        FileReader f = new FileReader(rutaArchivo);
        BufferedReader b = new BufferedReader(f);
        txt_log.setText("Importacion:\n");
        while ((linea = b.readLine()) != null) {
            lectura += linea + "\n";
            if (!linea.equals("")) {
                int cortar = linea.indexOf("\":[");
                JSONObject vector = json.decode(linea);
                vector.put("API", "setBackup");
                vector.put("entidad", linea.substring(2, cortar));
                txt_log.append("[-" + pasarela.backup(vector) + "-]   " + linea.substring(2, cortar) + "\n");
            }
        }
        b.close();

//        System.out.println(lectura);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_log;
    // End of variables declaration//GEN-END:variables
}
